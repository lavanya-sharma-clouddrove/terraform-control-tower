name: Deploy Terraform Stack

# Trigger the workflow manually
on:
  workflow_dispatch:
    inputs:
      enable_access_analyzer:
        description: 'Enable Access Analyzer Stack'
        required: true
        default: 'false'
        type: boolean
      enable_detective:
        description: 'Enable detective Stack'
        required: true
        default: 'false'
        type: boolean
      enable_guardduty:
        description: 'Enable GuardDuty Stack'
        required: true
        default: 'false'
        type: boolean
      enable_inspector:
        description: 'Enable Inspector Stack'
        required: true
        default: 'false'
        type: boolean
      enable_security_hub:
        description: 'Enable Security Hub Stack'
        required: true
        default: 'false'
        type: boolean
      enable_config:
        description: 'Enable Config Stack'
        required: true
        default: 'false'
        type: boolean
      enable_inspection_lambda:
        description: 'Enable Inspection Lambda Stack'
        required: true
        default: 'false'
        type: boolean
      enable_macie:
        description: 'Enable Macie Stack'
        required: true
        default: 'false'
        type: boolean
      enable_notification_webhook:
        description: 'Enable notification webhook Stack'
        required: true
        default: 'false'
        type: boolean
      confirm_apply:
        description: 'Confirm Apply'
        required: true
        default: 'false'
        type: boolean

jobs:
  deploy:
    name: Deploy Terraform
    runs-on: ubuntu-latest
    
    env:
      TERRAFORM_VERSION: "1.6.6"  # Updated to a more recent stable version
      
    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Debug input values
      - name: Debug Terraform Inputs
        run: |
          echo "Enable Access Analyzer: ${{ github.event.inputs.enable_access_analyzer }}"
          echo "Enable detective: ${{ github.event.inputs.enable_detective }}"
          echo "Enable GuardDuty: ${{ github.event.inputs.enable_guardduty }}"
          echo "Enable Inspector: ${{ github.event.inputs.enable_inspector }}"
          echo "Enable Security Hub: ${{ github.event.inputs.enable_security_hub }}"
          echo "Enable Config: ${{ github.event.inputs.enable_config }}"
          echo "Enable Inspection Lambda: ${{ github.event.inputs.enable_inspection_lambda }}"
          echo "Enable Macie: ${{ github.event.inputs.enable_macie }}"
          echo "Enable Notification Webhook: ${{ github.event.inputs.enable_notification_webhook }}"
          echo "Region: ${{ secrets.AWS_REGION }}"

      # Step 3: Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      # Step 4: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      # Step 5: Initialize Terraform
      - name: Initialize Terraform
        run: |
          terraform init -input=false

      # Step 6: Terraform Format Check (optional but recommended)
      - name: Terraform Format Check
        run: |
          terraform fmt -check -recursive

      # Step 7: Terraform Plan
      - name: Terraform Plan
        id: plan
        run: |
          terraform plan \
            -input=false \
            -out=tfplan \
            -var "enable_access_analyzer=${{ github.event.inputs.enable_access_analyzer }}" \
            -var "enable_detective=${{ github.event.inputs.enable_detective }}" \
            -var "enable_guardduty=${{ github.event.inputs.enable_guardduty }}" \
            -var "enable_inspector=${{ github.event.inputs.enable_inspector }}" \
            -var "enable_security_hub=${{ github.event.inputs.enable_security_hub }}" \
            -var "enable_config=${{ github.event.inputs.enable_config }}" \
            -var "enable_inspection_lambda=${{ github.event.inputs.enable_inspection_lambda }}" \
            -var "enable_macie=${{ github.event.inputs.enable_macie }}" \
            -var "region=${{ secrets.AWS_REGION }}" \
            -var "delegated_account_id=${{ secrets.DELEGATED_ACCOUNT_ID }}" \
            -var "inspector_account_id=${{ secrets.INSPECTOR_ACCOUNT_ID }}" \
            -var "template_bucket_name=${{ secrets.TEMPLATE_BUCKET_NAME }}" \
            -var "role_to_assume=${{ secrets.ROLE_TO_ASSUME }}" \
            -var "MacieMasterAccountId=${{ secrets.MASTER_ACCOUNT_ID }}" \
            -var "access_analyzer_template_file=${{ secrets.ACCESS_ANALYZER_TEMPLATE_FILE }}" \
            -var "detective_template_file=${{ secrets.DETECTIVE_TEMPLATE_FILE }}" \
            -var "guardduty_template_file=${{ secrets.GUARDDUTY_TEMPLATE_FILE }}" \
            -var "inspector_template_file=${{ secrets.INSPECTOR_TEMPLATE_FILE }}" \
            -var "security_hub_template_file=${{ secrets.SECURITY_HUB_TEMPLATE_URL }}" \
            -var "config_template_file=${{ secrets.CONFIG_TEMPLATE_URL }}" \
            -var "inspection_lambda_template_file=${{ secrets.INSPECTION_LAMBDA_TEMPLATE_URL }}" \
            -var "macie_template_file=${{ secrets.MACIE_TEMPLATE_URL }}" \
            -var "notification_webhook_template_file=${{ secrets.NOTIFICATION_WEBHOOK_URL }}" \
            -var "webhook_url=${{ secrets.WEBHOOK_URL }}"

      # Step 8: Show Plan
      - name: Show Plan
        run: |
          echo "Terraform Plan Output:"
          terraform show -no-color tfplan

      # Step 9: Plan Status
      - name: Check Plan Status
        id: plan-status
        run: |
          if terraform show -json tfplan | jq -e '.planned_values.root_module.resources | length > 0'; then
            echo "Changes detected in the plan"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "No changes detected in the plan"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

      # Step 10: Apply Terraform (only if confirm_apply is true and there are changes)
      - name: Apply Terraform
        if: github.event.inputs.confirm_apply == 'true' && steps.plan-status.outputs.has_changes == 'true'
        run: |
          terraform apply -auto-approve tfplan

      # Step 11: Terraform Output (only if apply was executed)
      - name: Terraform Output
        if: github.event.inputs.confirm_apply == 'true' && steps.plan-status.outputs.has_changes == 'true'
        run: |
          terraform output

      # Step 12: Error Handler
      - name: Error Handler
        if: failure()
        run: |
          echo "::error::Terraform deployment failed. Check the logs above for detailed error messages."
          echo "Common issues to check:"
          echo "1. AWS credentials and permissions"
          echo "2. Terraform state configuration"
          echo "3. Variable values and secret availability"
          echo "4. Resource constraints or service quotas"
          exit 1

permissions:
  contents: read
  id-token: write
