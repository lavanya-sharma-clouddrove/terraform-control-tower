name: Deploy Terraform Stack

on:
  workflow_dispatch:
    inputs:
      enable_access_analyzer:
        description: 'Enable Access Analyzer Stack'
        required: true
        default: 'false'
        type: boolean
      enable_detective:
        description: 'Enable detective Stack'
        required: true
        default: 'false'
        type: boolean
      enable_guardduty:
        description: 'Enable GuardDuty Stack'
        required: true
        default: 'false'
        type: boolean
      enable_inspector:
        description: 'Enable Inspector Stack'
        required: true
        default: 'false'
        type: boolean
      enable_security_hub:
        description: 'Enable Security Hub Stack'
        required: true
        default: 'false'
        type: boolean
      enable_config:
        description: 'Enable Config Stack'
        required: true
        default: 'false'
        type: boolean
      enable_inspection_lambda:
        description: 'Enable Inspection Lambda Stack'
        required: true
        default: 'false'
        type: boolean
      enable_macie:
        description: 'Enable Macie Stack'
        required: true
        default: 'false'
        type: boolean
      enable_notification_webhook:
        description: 'Enable notification webhook Stack'
        required: true
        default: 'false'
        type: boolean
      confirm_apply:
        description: 'Confirm Apply'
        required: true
        default: 'false'
        type: boolean

jobs:
  deploy:
    name: Deploy Terraform
    runs-on: ubuntu-latest
    
    env:
      TERRAFORM_VERSION: "1.6.6"
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Debug Terraform Inputs
        run: |
          echo "Enable Access Analyzer: ${{ github.event.inputs.enable_access_analyzer }}"
          echo "Enable detective: ${{ github.event.inputs.enable_detective }}"
          echo "Enable GuardDuty: ${{ github.event.inputs.enable_guardduty }}"
          echo "Enable Inspector: ${{ github.event.inputs.enable_inspector }}"
          echo "Enable Security Hub: ${{ github.event.inputs.enable_security_hub }}"
          echo "Enable Config: ${{ github.event.inputs.enable_config }}"
          echo "Enable Inspection Lambda: ${{ github.event.inputs.enable_inspection_lambda }}"
          echo "Enable Macie: ${{ github.event.inputs.enable_macie }}"
          echo "Region: ${{ secrets.AWS_REGION }}"

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Initialize Terraform
        run: terraform init -input=false

      - name: Terraform Format Check
        run: terraform fmt -check -recursive

      - name: Terraform Plan
        id: plan
        run: | 
          cat << EOF > terraform.tfvars
          enable_access_analyzer = "${{ github.event.inputs.enable_access_analyzer }}"
          enable_detective = "${{ github.event.inputs.enable_detective }}"
          enable_guardduty = "${{ github.event.inputs.enable_guardduty }}"
          enable_inspector = "${{ github.event.inputs.enable_inspector }}"
          enable_security_hub = "${{ github.event.inputs.enable_security_hub }}"
          enable_config = "${{ github.event.inputs.enable_config }}"
          enable_inspection_lambda = "${{ github.event.inputs.enable_inspection_lambda }}"
          enable_macie = "${{ github.event.inputs.enable_macie }}"
          region = "${{ secrets.AWS_REGION }}"
          delegated_account_id = "${{ secrets.DELEGATED_ACCOUNT_ID }}"
          inspector_account_id = "${{ secrets.INSPECTOR_ACCOUNT_ID }}"
          template_bucket_name = "${{ secrets.TEMPLATE_BUCKET_NAME }}"
          role_to_assume = "${{ secrets.ROLE_TO_ASSUME }}"
          MacieMasterAccountId = "${{ secrets.MASTER_ACCOUNT_ID }}"
          access_analyzer_template_file = "${{ secrets.ACCESS_ANALYZER_TEMPLATE_FILE }}"
          detective_template_file = "${{ secrets.DETECTIVE_TEMPLATE_FILE }}"
          guardduty_template_file = "${{ secrets.GUARDDUTY_TEMPLATE_FILE }}"
          inspector_template_file = "${{ secrets.INSPECTOR_TEMPLATE_FILE }}"
          security_hub_template_file = "${{ secrets.SECURITY_HUB_TEMPLATE_URL }}"
          config_template_file = "${{ secrets.CONFIG_TEMPLATE_URL }}"
          inspection_lambda_template_file = "${{ secrets.INSPECTION_LAMBDA_TEMPLATE_URL }}"
          macie_template_file = "${{ secrets.MACIE_TEMPLATE_URL }}"
          notification_webhook_template_file = "${{ secrets.NOTIFICATION_WEBHOOK_URL }}"
          webhook_url = "${{ secrets.WEBHOOK_URL }}"
          EOF

          terraform plan -input=false -out=tfplan

      - name: Show Plan
        run: terraform show -no-color tfplan

      - name: Check Plan Status
        id: plan-status
        run: |
          if terraform show -json tfplan | jq -e '.planned_values.root_module.resources | length > 0'; then
            echo "Changes detected in the plan"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "No changes detected in the plan"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Apply Terraform
        if: github.event.inputs.confirm_apply == 'true' && steps.plan-status.outputs.has_changes == 'true'
        run: terraform apply -auto-approve tfplan

      - name: Terraform Output
        if: github.event.inputs.confirm_apply == 'true' && steps.plan-status.outputs.has_changes == 'true'
        run: terraform output

      - name: Error Handler
        if: failure()
        run: |
          echo "::error::Terraform deployment failed. Check the logs above for detailed error messages."
          echo "Common issues to check:"
          echo "1. AWS credentials and permissions"
          echo "2. Terraform state configuration"
          echo "3. Variable values and secret availability"
          echo "4. Resource constraints or service quotas"
          exit 1

permissions:
  contents: read
  id-token: write
