name: Deploy Terraform Stack

on:
  workflow_dispatch:
    inputs:
      enable_access_analyzer:
        description: 'Enable Access Analyzer'
        required: true
        type: choice
        options:
          - true
          - false
      enable_detective:
        description: 'Enable Detective'
        required: true
        type: choice
        options:
          - true
          - false
      enable_guardduty:
        description: 'Enable GuardDuty'
        required: true
        type: choice
        options:
          - true
          - false
      enable_inspector:
        description: 'Enable Inspector'
        required: true
        type: choice
        options:
          - true
          - false
      enable_security_hub:
        description: 'Enable Security Hub'
        required: true
        type: choice
        options:
          - true
          - false
      enable_config:
        description: 'Enable Config'
        required: true
        type: choice
        options:
          - true
          - false
      enable_inspection_lambda:
        description: 'Enable Inspection Lambda'
        required: true
        type: choice
        options:
          - true
          - false
      enable_macie:
        description: 'Enable Macie'
        required: true
        type: choice
        options:
          - true
          - false
      enable_notification_webhook:
        description: 'Enable Notification Webhook'
        required: true
        type: choice
        options:
          - true
          - false
      enable_subdomain_delegation:
        description: 'Enable Subdomain Delegation'
        required: true
        type: choice
        options:
          - true
          - false
      enable_backup_member_account_role:
        description: 'Enable Backup Member Account Role'
        required: true
        type: choice
        options:
          - true
          - false
      enable_backup_member_account:
        description: 'Enable Backup Member Account'
        required: true
        type: choice
        options:
          - true
          - false          
      enable_central_backup_account:
        description: 'Enable Central Backup Account'
        required: true
        type: choice
        options:
          - true
          - false        
      enable_central_backup_org_account:
        description: 'Enable Central Backup Org Account'
        required: true
        type: choice
        options:
          - true
          - false
      confirm_apply:
        description: 'Confirm Apply'
        required: true
        default: 'false'
        type: boolean

jobs:
  deploy:
    name: Deploy Terraform
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Debug input values (before initializing Terraform)
      - name: Debug Terraform Inputs
        run: |
          echo "Enable Access Analyzer: ${{ github.event.inputs.enable_access_analyzer }}"
          echo "Enable Detective: ${{ github.event.inputs.enable_detective }}"
          echo "Enable GuardDuty: ${{ github.event.inputs.enable_guardduty }}"
          echo "Enable Inspector: ${{ github.event.inputs.enable_inspector }}"
          echo "Enable Security Hub: ${{ github.event.inputs.enable_security_hub }}"
          echo "Enable Config: ${{ github.event.inputs.enable_config }}"
          echo "Enable Inspection Lambda: ${{ github.event.inputs.enable_inspection_lambda }}"
          echo "Enable Macie: ${{ github.event.inputs.enable_macie }}"
          echo "Enable Notification Webhook: ${{ github.event.inputs.enable_notification_webhook }}"
          echo "Enable Subdomain Delegation: ${{ github.event.inputs.enable_subdomain_delegation }}"
          echo "Enable Backup Member Account Role: ${{ github.event.inputs.enable_backup_member_account_role }}"
          echo "Enable Backup Member Account: ${{ github.event.inputs.enable_backup_member_account }}"
          echo "Enable Central Backup Account: ${{ github.event.inputs.enable_central_backup_account }}"
          echo "Enable Central Backup Org Account: ${{ github.event.inputs.enable_central_backup_org_account }}"
          echo "Region: ${{ secrets.AWS_REGION }}"

      # Step 3: Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.8  # Specify your desired version

      # Step 4: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      # Step 5: Initialize Terraform
      - name: Initialize Terraform
        run: terraform init

      # Step 6: Terraform Plan
      - name: Terraform Plan
        id: plan
        env:
          TF_VAR_enable_access_analyzer: ${{ github.event.inputs.enable_access_analyzer }}
          TF_VAR_enable_detective: ${{ github.event.inputs.enable_detective }}
          TF_VAR_enable_guardduty: ${{ github.event.inputs.enable_guardduty }}
          TF_VAR_enable_inspector: ${{ github.event.inputs.enable_inspector }}
          TF_VAR_enable_security_hub: ${{ github.event.inputs.enable_security_hub }}
          TF_VAR_enable_config: ${{ github.event.inputs.enable_config }}
          TF_VAR_enable_inspection_lambda: ${{ github.event.inputs.enable_inspection_lambda }}
          TF_VAR_enable_macie: ${{ github.event.inputs.enable_macie }}
          TF_VAR_enable_notification_webhook: ${{ github.event.inputs.enable_notification_webhook }}
          TF_VAR_enable_subdomain_delegation: ${{ github.event.inputs.enable_subdomain_delegation }}
          TF_VAR_enable_backup_member_account_role: ${{ github.event.inputs.enable_backup_member_account_role }}
          TF_VAR_enable_backup_member_account: ${{ github.event.inputs.enable_backup_member_account }}
          TF_VAR_enable_central_backup_account: ${{ github.event.inputs.enable_central_backup_account }}
          TF_VAR_enable_central_backup_org_account: ${{ github.event.inputs.enable_central_backup_org_account }}
          TF_VAR_delegated_account_id: ${{ secrets.DELEGATED_ACCOUNT_ID }}
          TF_VAR_template_bucket_name: ${{ secrets.TEMPLATE_BUCKET_NAME }}
          TF_VAR_access_analyzer_template_file: ${{ secrets.ACCESS_ANALYZER_TEMPLATE_FILE }}
          TF_VAR_detective_template_file: ${{ secrets.DETECTIVE_TEMPLATE_FILE }}
          TF_VAR_guardduty_template_file: ${{ secrets.GUARDDUTY_TEMPLATE_FILE }}
          TF_VAR_inspector_template_file: ${{ secrets.INSPECTOR_TEMPLATE_FILE }}
          TF_VAR_security_hub_template_file: ${{ secrets.SECURITY_HUB_TEMPLATE_FILE }}
          TF_VAR_config_template_file: ${{ secrets.CONFIG_TEMPLATE_URL }}
          TF_VAR_inspection_lambda_template_file: ${{ secrets.INSPECTION_LAMBDA_TEMPLATE_FILE }}
          TF_VAR_macie_template_file: ${{ secrets.MACIE_TEMPLATE_FILE }}
          TF_VAR_subdomain_delegation_template_file: ${{ secrets.SUBDOMAIN_DELEGATION_TEMPLATE_FILE }}
          TF_VAR_notification_webhook_template_file: ${{ secrets.NOTIFICATION_WEBHOOK_FILE }}
          TF_VAR_webhook_url: ${{ secrets.WEBHOOK_URL }}
          TF_VAR_excluded_accounts: ${{ secrets.EXCLUDED_ACCOUNT_ID }}
          TF_VAR_administration_role_arn: ${{ secrets.ADMINISTRATION_ROLE_ARN }}
          TF_VAR_pCentralBackupVaultArn: ${{ secrets.PCENTRAL_BACKUP_VAULT_ARN }}
          TF_VAR_subdomain_delegation_hosted_zone_id: ${{ secrets.SUBDOMAIN_DELEGATION_HOSTED_ZONE_ID }}
          TF_VAR_subdomain_delegation_authorized_account: ${{ secrets.SUBDOMAIN_DELEGATION_AUTHORIZED_ACCOUNT }}
          TF_VAR_subdomain_delegation_domain_name: ${{ secrets.SUBDOMAIN_DELEGATION_DOMAIN_NAME }}
          TF_VAR_backup_member_role_template_file: ${{ secrets.BACKUP_MEMBER_ROLE_TEMPLATE_FILE }}
          TF_VAR_backup_member_account_file: ${{ secrets.BACKUP_MEMBER_ACCOUNT_FILE }}
          TF_VAR_central_backup_account_file: ${{ secrets.CENTRAL_BACKUP_ACCOUNT_FILE }}
          TF_VAR_central_backup_org_account_template_file: ${{ secrets.CENTRAL_BACKUP_ORG_ACCOUNT_TEMPLATE_FILE }}

        run: terraform plan -out=tfplan

      # Step 7: Check Terraform Plan result
      - name: Check Plan Result
        run: |
          if terraform show -json | jq -e '.planned_values.root_module.resources | length > 0'; then
            echo "Plan successful! Resources will be created."
          else
            echo "Plan successful but no changes detected."
          fi

      # Step 8: Apply Terraform (manual approval required)
      - name: Apply Terraform (manual approval required)
        if: ${{ github.event.inputs.confirm_apply == 'true' }}  
        run: terraform apply -auto-approve tfplan

      # Step 9: Output Terraform results
      - name: Terraform Output
        run: terraform output

      # Step 10: Handle errors (Optional, for better debugging)
      - name: Handle errors
        if: failure()
        run: |
          echo "Terraform apply failed. Please check the logs for details."
