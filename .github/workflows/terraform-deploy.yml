name: Deploy Terraform Stack

on:
  workflow_dispatch:
    inputs:
      services:
        description: 'Specify the services to deploy (access-analyser, guard-duty, inspector, macie, securityhub, detective, config, inspection-lambda, subdomain-delegation, notification-webhook, backup-member-account-role, backup-member-account, central-backup-account, central-backup-org-account). Use a comma to separate multiple services.'
        required: true
      confirm_apply:
        description: 'Confirm Apply'
        required: true
        default: 'false'
        type: boolean

jobs:
  deploy:
    name: Deploy Terraform
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.8  # Specify your desired version

      # Step 3: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      # Step 4: Initialize Terraform
      - name: Initialize Terraform
        run: terraform init

      # Step 5: Set environment variables based on services input
      - name: Set Terraform Variables
        id: set_vars
        run: |
          IFS=',' read -ra SERVICES <<< "${{ github.event.inputs.services }}"
          for service in "${SERVICES[@]}"; do
            case "$service" in
              access-analyser)
                echo "TF_VAR_enable_access_analyzer=true" >> $GITHUB_ENV
                ;;
              guard-duty)
                echo "TF_VAR_enable_guardduty=true" >> $GITHUB_ENV
                ;;
              inspector)
                echo "TF_VAR_enable_inspector=true" >> $GITHUB_ENV
                ;;
              macie)
                echo "TF_VAR_enable_macie=true" >> $GITHUB_ENV
                ;;
              securityhub)
                echo "TF_VAR_enable_security_hub=true" >> $GITHUB_ENV
                ;;
              detective)
                echo "TF_VAR_enable_detective=true" >> $GITHUB_ENV
                ;;
              config)
                echo "TF_VAR_enable_config=true" >> $GITHUB_ENV
                ;;
              inspection-lambda)
                echo "TF_VAR_enable_inspection_lambda=true" >> $GITHUB_ENV
                ;;
              subdomain-delegation)
                echo "TF_VAR_enable_subdomain_delegation=true" >> $GITHUB_ENV
                ;;
              notification-webhook)
                echo "TF_VAR_enable_notification_webhook=true" >> $GITHUB_ENV
                ;;
              backup-member-account-role)
                echo "TF_VAR_enable_backup_member_account_role=true" >> $GITHUB_ENV
                ;;
              backup-member-account)
                echo "TF_VAR_enable_backup_member_account=true" >> $GITHUB_ENV
                ;;
              central-backup-account)
                echo "TF_VAR_enable_central_backup_account=true" >> $GITHUB_ENV
                ;;
              central-backup-org-account)
                echo "TF_VAR_enable_central_backup_org_account=true" >> $GITHUB_ENV
                ;;
              *)
                echo "Unknown service: $service"
                ;;
            esac
          done

      # Step 6: Terraform Plan
      - name: Terraform Plan
        id: plan
        env:
          TF_VAR_delegated_account_id: ${{ secrets.DELEGATED_ACCOUNT_ID }}
          TF_VAR_template_bucket_name: ${{ secrets.TEMPLATE_BUCKET_NAME }}
          TF_VAR_access_analyzer_template_file: ${{ secrets.ACCESS_ANALYZER_TEMPLATE_FILE }}
          TF_VAR_detective_template_file: ${{ secrets.DETECTIVE_TEMPLATE_FILE }}
          TF_VAR_guardduty_template_file: ${{ secrets.GUARDDUTY_TEMPLATE_FILE }}
          TF_VAR_inspector_template_file: ${{ secrets.INSPECTOR_TEMPLATE_FILE }}
          TF_VAR_security_hub_template_file: ${{ secrets.SECURITY_HUB_TEMPLATE_FILE }}
          TF_VAR_config_template_file: ${{ secrets.CONFIG_TEMPLATE_URL }}
          TF_VAR_inspection_lambda_template_file: ${{ secrets.INSPECTION_LAMBDA_TEMPLATE_FILE }}
          TF_VAR_macie_template_file: ${{ secrets.MACIE_TEMPLATE_FILE }}
          TF_VAR_subdomain_delegation_template_file: ${{ secrets.SUBDOMAIN_DELEGATION_TEMPLATE_FILE }}
          TF_VAR_notification_webhook_template_file: ${{ secrets.NOTIFICATION_WEBHOOK_FILE }}
          TF_VAR_webhook_url: ${{ secrets.WEBHOOK_URL }}
          TF_VAR_excluded_accounts: ${{ secrets.EXCLUDED_ACCOUNT_ID }}
          TF_VAR_administration_role_arn: ${{ secrets.ADMINISTRATION_ROLE_ARN }}
          TF_VAR_pCentralBackupVaultArn: ${{ secrets.PCENTRAL_BACKUP_VAULT_ARN }}
          TF_VAR_subdomain_delegation_hosted_zone_id: ${{ secrets.SUBDOMAIN_DELEGATION_HOSTED_ZONE_ID }}
          TF_VAR_subdomain_delegation_authorized_account: ${{ secrets.SUBDOMAIN_DELEGATION_AUTHORIZED_ACCOUNT }}
          TF_VAR_subdomain_delegation_domain_name: ${{ secrets.SUBDOMAIN_DELEGATION_DOMAIN_NAME }}
          TF_VAR_backup_member_role_template_file: ${{ secrets.BACKUP_MEMBER_ROLE_TEMPLATE_FILE }}
          TF_VAR_backup_member_account_file: ${{ secrets.BACKUP_MEMBER_ACCOUNT_FILE }}
          TF_VAR_central_backup_account_file: ${{ secrets.CENTRAL_BACKUP_ACCOUNT_FILE }}
          TF_VAR_central_backup_org_account_template_file: ${{ secrets.CENTRAL_BACKUP_ORG_ACCOUNT_TEMPLATE_FILE }}

        run: terraform plan -out=tfplan

      # Step 7: Check Terraform Plan result
      - name: Check Plan Result
        run: |
          if terraform show -json tfplan | jq -e '.planned_values.root_module.resources | length > 0'; then
            echo "Plan successful! Resources will be created."
          else
            echo "Plan successful but no changes detected."
          fi

      # Step 8: Apply Terraform (manual approval required)
      - name: Apply Terraform (manual approval required)
        if: ${{ github.event.inputs.confirm_apply == 'true' }}  
        run: terraform apply -auto-approve tfplan

      # Step 9: Output Terraform results
      - name: Terraform Output
        run: terraform output

      # Step 10: Handle errors (Optional, for better debugging)
      - name: Handle errors
        if: failure()
        run: |
          echo "Terraform apply failed. Please check the logs for details."
