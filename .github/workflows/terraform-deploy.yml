name: Deploy Terraform Stack

on:
  workflow_dispatch:
    inputs:
      services:
        description: 'Specify the services to deploy (access-analyzer, guard-duty, inspector, macie, securityhub, detective, config, inspection-lambda, hostedzone-master). Use a comma to separate multiple services.'
        required: true

jobs:
  deploy:
    name: Deploy Terraform
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Parse services input and set environment variables
      - name: Set Terraform Variables Based on Services Input
        id: set_tf_vars
        run: |
          # Split services input into an array
          services="${{ github.event.inputs.services }}"
          IFS=',' read -r -a service_array <<< "$services"

          # Initialize all variables to "false"
          echo "TF_VAR_enable_access_analyzer=false" >> $GITHUB_ENV
          echo "TF_VAR_enable_guardduty=false" >> $GITHUB_ENV
          echo "TF_VAR_enable_inspector=false" >> $GITHUB_ENV
          echo "TF_VAR_enable_macie=false" >> $GITHUB_ENV
          echo "TF_VAR_enable_security_hub=false" >> $GITHUB_ENV
          echo "TF_VAR_enable_detective=false" >> $GITHUB_ENV
          echo "TF_VAR_enable_config=false" >> $GITHUB_ENV
          echo "TF_VAR_enable_inspection_lambda=false" >> $GITHUB_ENV
          echo "TF_VAR_enable_hostedzone_master=false" >> $GITHUB_ENV

          # Enable specified services
          for service in "${service_array[@]}"; do
            case "$service" in
              access-analyzer) echo "TF_VAR_enable_access_analyzer=true" >> $GITHUB_ENV ;;
              guard-duty) echo "TF_VAR_enable_guardduty=true" >> $GITHUB_ENV ;;
              inspector) echo "TF_VAR_enable_inspector=true" >> $GITHUB_ENV ;;
              macie) echo "TF_VAR_enable_macie=true" >> $GITHUB_ENV ;;
              securityhub) echo "TF_VAR_enable_security_hub=true" >> $GITHUB_ENV ;;
              detective) echo "TF_VAR_enable_detective=true" >> $GITHUB_ENV ;;
              config) echo "TF_VAR_enable_config=true" >> $GITHUB_ENV ;;
              inspection-lambda) echo "TF_VAR_enable_inspection_lambda=true" >> $GITHUB_ENV ;;
              hostedzone-master) echo "TF_VAR_enable_hostedzone_master=true" >> $GITHUB_ENV ;;
              *) echo "Unknown service: $service" ;;
            esac
          done

      # Step 3: Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.8

      # Step 4: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      # Step 5: Initialize Terraform
      - name: Initialize Terraform
        run: terraform init

      # Step 6: Terraform Plan
      - name: Terraform Plan
        id: plan
        env:
          TF_VAR_region: ${{ secrets.AWS_REGION }}
          TF_VAR_delegated_account_id: ${{ secrets.DELEGATED_ACCOUNT_ID }}
          TF_VAR_template_bucket_name: ${{ secrets.TEMPLATE_BUCKET_NAME }}
          TF_VAR_role_to_assume: ${{ secrets.ROLE_TO_ASSUME }}
          TF_VAR_access_analyzer_template_file_s3_object_url: ${{ secrets.ACCESS_ANALYZER_TEMPLATE_FILE }}
          TF_VAR_detective_template_file_s3_object_url: ${{ secrets.DETECTIVE_TEMPLATE_FILE }}
          TF_VAR_guardduty_template_file_s3_object_url: ${{ secrets.GUARDDUTY_TEMPLATE_FILE }}
          TF_VAR_inspector_template_file_s3_object_url: ${{ secrets.INSPECTOR_TEMPLATE_FILE }}
          TF_VAR_security_hub_template_file_s3_object_url: ${{ secrets.SECURITY_HUB_TEMPLATE_URL }}
          TF_VAR_config_template_file_s3_object_url: ${{ secrets.CONFIG_TEMPLATE_URL }}
          TF_VAR_inspection_lambda_template_file_s3_object_url: ${{ secrets.INSPECTION_LAMBDA_TEMPLATE_URL }}
          TF_VAR_macie_template_file_s3_object_url: ${{ secrets.MACIE_TEMPLATE_URL }}
          TF_VAR_notification_webhook_template_file_s3_object_url: ${{ secrets.NOTIFICATION_WEBHOOK_URL }}
          TF_VAR_webhook_url: ${{ secrets.WEBHOOK_URL }}
          TF_VAR_excluded_accounts: ${{ secrets.EXCLUDED_ACCOUNTS }}
        run: terraform plan -out=tfplan

      # Step 7: Check Terraform Plan result
      - name: Check Plan Result
        run: |
          if terraform show -json | jq -e '.planned_values.root_module.resources | length > 0'; then
            echo "Plan successful! Resources will be created."
          else
            echo "Plan successful but no changes detected."
          fi

      # Step 8: Apply Terraform (manual approval required)
      - name: Apply Terraform (manual approval required)
        if: ${{ github.event.inputs.confirm_apply == 'true' }}  
        run: terraform apply -auto-approve tfplan

      # Step 9: Output Terraform results
      - name: Terraform Output
        run: terraform output

      # Step 10: Handle errors (Optional, for better debugging)
      - name: Handle errors
        if: failure()
        run: |
          echo "Terraform apply failed. Please check the logs for details."
